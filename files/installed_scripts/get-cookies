#!/usr/bin/env python3

import sqlite3
import os
import csv
import sys
import validators
import shutil
from urllib.parse import urlparse
from pathlib import Path
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.padding import PKCS7
import base64
import argparse



FILENAME = "cookies.sqlite"
BROWSER="Librewolf"

LOCATIONS = {
    "Librewolf": (f"{Path.home()}/.var/app/io.gitlab.librewolf-community/.librewolf", False),
    "Mullvad": (f"{Path.home()}/.var/app/net.mullvad.MullvadBrowser/.mullvad-browser/.mullvad/mullvadbrowser", False),
    "Chromium": (f"{Path.home()}/.config/chromium/Default/Cookies", True),
    "Opera": (f"{Path.home()}/.var/app/com.opera.Opera/config/opera/Default/Cookies", True),
    # "Brave": (f"{Path.home()}/.var/app/com.brave.Browser/config/BraveSoftware/Brave-Browser/Default/Cookies", True)
}

# Initialize parser
parser = argparse.ArgumentParser()

# Adding optional argument
parser.add_argument("-b", "--browser", help = f"Choose browser: [{', '.join(LOCATIONS.keys())}]")

parser.add_argument("args", nargs="*")

# Read arguments from command line
args = parser.parse_args()

if args.browser:
    # print("Displaying Output as: % s" % args.Output)
    BROWSER = args.browser

domains = []


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def find_cookies_file(location):

    res = None
    for root, dirs, files in os.walk(location):
        if FILENAME in files:
            res = os.path.join(root, FILENAME)

    if not res or not os.path.exists(res):
        eprint(res, "does not exist")
        sys.exit(1)

    return res

def extract_domains():
    if len(args.args) >= 1:
    #if len(sys.argv) > 1:
        #for url in sys.argv[1:]:
        for url in args.args:
            if validators.domain(url):
                domains.append(url)
                continue
            parsed_url = urlparse(url)
            domain = parsed_url.netloc
            if domain and validators.domain(domain):
                domains.append(domain)
    else:
        eprint("Please provide one or more URLs as command-line arguments.")
        sys.exit(1)

def get_cookies_moz(sqlite_file = "/tmp/cookies.sqlite"):
    """Exports cookies from SQLite to CSV format."""
    conn = sqlite3.connect(sqlite_file)
    cursor = conn.cursor()

    query = """
    SELECT host, path, isSecure, expiry, name, value 
    FROM moz_cookies
    WHERE 
    """
    for domain in domains:
        query += f"host='{domain}' OR host='.{domain}' OR "
    query += "host='poopoo';"

    cursor.execute(query)
    cookies = cursor.fetchall()
    conn.close()
    return cookies

def clean(x):
    return x[:-x[-1]].decode('utf8')

def decrypt_cookie(encrypted_value):
    encrypted_value = encrypted_value[3:]
    salt = b'saltysalt'
    iv = b' ' * 16
    length = 16

    MY_PASS='peanuts'
    my_pass = MY_PASS
    my_pass = my_pass.encode('utf8')
    iterations = 1

    # Derive key using PBKDF2HMAC
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA1(),
        length=length,
        salt=salt,
        iterations=iterations,
        backend=default_backend()
    )
    key = kdf.derive(my_pass)
    
    # Decrypt using AES-CBC
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Decrypt and remove padding
    decrypted_value = decryptor.update(encrypted_value) + decryptor.finalize()

    # Handle PKCS7 padding
    unpadder = PKCS7(algorithms.AES.block_size).unpadder()
    decrypted = unpadder.update(decrypted_value) + unpadder.finalize()

    try:
        res = decrypted.decode('utf-8')
    except:
        res = decrypted[32:].decode('utf-8')
    
    return res

def get_cookies_chr(sqlite_file = "/tmp/cookies.sqlite"):
    """Exports cookies from SQLite to CSV format."""
    conn = sqlite3.connect(sqlite_file)
    cursor = conn.cursor()

    query = """
    SELECT host_key, path, is_secure, expires_utc, name, encrypted_value 
    FROM cookies
    WHERE 
    """
    for domain in domains:
        query += f"host_key='{domain}' OR host_key='.{domain}' OR "
    query += "host_key='poopoo';"

    cursor.execute(query)
    cookies = cursor.fetchall()
    new_cookies = []
    for cookie in cookies:
        new_cookie = [cookie[0], cookie[1], cookie[2], cookie[3], cookie[4], decrypt_cookie(cookie[5])]
        new_cookies.append(new_cookie)
    conn.close()
    return new_cookies


def export_cookies_to_txt(cookies, txt_file = "/tmp/cookies.txt"):
    with open(txt_file, 'w') as txtfile:
        txtfile.write("# Netscape HTTP Cookie File\n")
        for cookie in cookies:
            domain = cookie[0]
            if domain[0] != '.' and domain.count(".") < 2:
                domain = f".{domain}"
            path = cookie[1]
            secure = 'TRUE' if cookie[2] == '1' else 'FALSE'
            expiry = cookie[3]
            name = cookie[4]
            value = cookie[5]
            txtfile.write(f"{domain}\tTRUE\t{path}\t{secure}\t{expiry}\t{name}\t{value}\n")


    res = ""
    with open(txt_file, 'r') as txtfile:
        res = txtfile.readlines() 
    res = "".join(res)
        
    return res


def main():
    chromium = LOCATIONS[BROWSER][1]
    location = LOCATIONS[BROWSER][0]
    if chromium:
        sqlite_file = location
    else:
        sqlite_file = find_cookies_file(location)

    extract_domains()
    shutil.copyfile(sqlite_file, "/tmp/cookies.sqlite")
  
    if chromium:
        cookies = get_cookies_chr(sqlite_file)
    else:
        cookies = get_cookies_moz(sqlite_file)
    res = export_cookies_to_txt(cookies)
    print(res)

if __name__ == "__main__":
    main()



